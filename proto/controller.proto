syntax = "proto3";

package Drunc;

service Controller {
  rpc add_to_broadcast_list(BroadcastRequest) returns (GenericResponse) {}
  rpc remove_from_broadcast_list(BroadcastRequest) returns (GenericResponse) {}
  // list broadcasted?
  rpc get_command_list(Token) returns (ListOfCommandsResponse) {}
  rpc execute_command(CommandExecutionRequest) returns (CommandResponse) {}
  rpc take_control(Token) returns (GenericResponse) {}
  rpc surrender_control(Token) returns (GenericResponse) {}
}

service Broadcast {
  rpc handle_broadcast(BroadcastMessage) returns (GenericResponse) {}
}

message Token {
  string text = 1;
}
enum Level {
  DEBUG = 0;
  INFO = 1;
  WARNING = 2;
  ERROR = 3;
  CRITICAL = 4;
}

enum ResponseCode {
  ACK = 0;
  DONE = 1;
  FAILED = 2;
  NOT_AUTHORISED = 3;
}

message GenericResponse {
  ResponseCode response_code = 1;
  string response_text = 2;
}

message BroadcastRequest {
  Token token = 1;
  string address_status_endpoint = 2;
}

message Ping {
  string text = 1;
}

message Node {
  string name = 1;
  string uuid = 2;
  repeated Node children = 3;
}


message Argument {
  enum ArgumentType{
    MANDATORY = 0;
    OPTIONAL = 1;
  }
  string name = 1;
  ArgumentType type = 2;
  string deflt = 3;
  string help = 4;
}

message CommandSpecification {
  string name = 1;
  repeated Argument arguments = 2;
  string help = 3;
  repeated Node locality = 4;
}

message ListOfCommandsResponse {
  GenericResponse server_response = 1;
  repeated CommandSpecification command = 2;
}

message CommandExecutionRequest {
  Token token = 1;
  repeated Node node = 2;
  Command command = 3;
}

message CommandResponse {
  ResponseCode response_code = 1;
  string response_text = 2;
  CommandSpecification command = 3;
  string command_data = 4;
}

message Command {
  CommandSpecification command = 1;
  string command_data = 2;
}

message BroadcastMessage {
  string emitter = 1;
  Level level = 2;
  string payload = 3;
}
