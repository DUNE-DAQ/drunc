# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import drunc.communication.controller_pb2 as controller__pb2


class ControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_to_broadcast_list = channel.unary_unary(
                '/Drunc.Controller/add_to_broadcast_list',
                request_serializer=controller__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=controller__pb2.ServerResponse.FromString,
                )
        self.get_command_list = channel.unary_unary(
                '/Drunc.Controller/get_command_list',
                request_serializer=controller__pb2.Token.SerializeToString,
                response_deserializer=controller__pb2.ListOfCommandsResponse.FromString,
                )
        self.execute_command = channel.unary_unary(
                '/Drunc.Controller/execute_command',
                request_serializer=controller__pb2.CommandExecutionRequest.SerializeToString,
                response_deserializer=controller__pb2.CommandResponse.FromString,
                )
        self.take_control = channel.unary_unary(
                '/Drunc.Controller/take_control',
                request_serializer=controller__pb2.Token.SerializeToString,
                response_deserializer=controller__pb2.ServerResponse.FromString,
                )
        self.surrender_control = channel.unary_unary(
                '/Drunc.Controller/surrender_control',
                request_serializer=controller__pb2.Token.SerializeToString,
                response_deserializer=controller__pb2.ServerResponse.FromString,
                )


class ControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add_to_broadcast_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_command_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def execute_command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def take_control(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def surrender_control(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_to_broadcast_list': grpc.unary_unary_rpc_method_handler(
                    servicer.add_to_broadcast_list,
                    request_deserializer=controller__pb2.BroadcastRequest.FromString,
                    response_serializer=controller__pb2.ServerResponse.SerializeToString,
            ),
            'get_command_list': grpc.unary_unary_rpc_method_handler(
                    servicer.get_command_list,
                    request_deserializer=controller__pb2.Token.FromString,
                    response_serializer=controller__pb2.ListOfCommandsResponse.SerializeToString,
            ),
            'execute_command': grpc.unary_unary_rpc_method_handler(
                    servicer.execute_command,
                    request_deserializer=controller__pb2.CommandExecutionRequest.FromString,
                    response_serializer=controller__pb2.CommandResponse.SerializeToString,
            ),
            'take_control': grpc.unary_unary_rpc_method_handler(
                    servicer.take_control,
                    request_deserializer=controller__pb2.Token.FromString,
                    response_serializer=controller__pb2.ServerResponse.SerializeToString,
            ),
            'surrender_control': grpc.unary_unary_rpc_method_handler(
                    servicer.surrender_control,
                    request_deserializer=controller__pb2.Token.FromString,
                    response_serializer=controller__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Drunc.Controller', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Controller(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add_to_broadcast_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Drunc.Controller/add_to_broadcast_list',
            controller__pb2.BroadcastRequest.SerializeToString,
            controller__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_command_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Drunc.Controller/get_command_list',
            controller__pb2.Token.SerializeToString,
            controller__pb2.ListOfCommandsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def execute_command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Drunc.Controller/execute_command',
            controller__pb2.CommandExecutionRequest.SerializeToString,
            controller__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def take_control(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Drunc.Controller/take_control',
            controller__pb2.Token.SerializeToString,
            controller__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def surrender_control(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Drunc.Controller/surrender_control',
            controller__pb2.Token.SerializeToString,
            controller__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BroadcastStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.broadcast = channel.stream_stream(
                '/Drunc.Broadcast/broadcast',
                request_serializer=controller__pb2.BroadcastMessage.SerializeToString,
                response_deserializer=controller__pb2.BroadcastMessage.FromString,
                )


class BroadcastServicer(object):
    """Missing associated documentation comment in .proto file."""

    def broadcast(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BroadcastServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'broadcast': grpc.stream_stream_rpc_method_handler(
                    servicer.broadcast,
                    request_deserializer=controller__pb2.BroadcastMessage.FromString,
                    response_serializer=controller__pb2.BroadcastMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Drunc.Broadcast', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Broadcast(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def broadcast(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Drunc.Broadcast/broadcast',
            controller__pb2.BroadcastMessage.SerializeToString,
            controller__pb2.BroadcastMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
