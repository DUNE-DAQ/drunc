# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import drunc.communication.controller_pb2 as controller__pb2


class ControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_control_tree = channel.unary_unary(
                '/Drunc.Controller/get_control_tree',
                request_serializer=controller__pb2.Ping.SerializeToString,
                response_deserializer=controller__pb2.ControlTree.FromString,
                )
        self.get_available_commands = channel.unary_unary(
                '/Drunc.Controller/get_available_commands',
                request_serializer=controller__pb2.Ping.SerializeToString,
                response_deserializer=controller__pb2.ListOfCommands.FromString,
                )
        self.execute_command = channel.unary_stream(
                '/Drunc.Controller/execute_command',
                request_serializer=controller__pb2.Command.SerializeToString,
                response_deserializer=controller__pb2.CommandResponse.FromString,
                )
        self.execute_command_on_child = channel.unary_stream(
                '/Drunc.Controller/execute_command_on_child',
                request_serializer=controller__pb2.ChildCommand.SerializeToString,
                response_deserializer=controller__pb2.CommandResponse.FromString,
                )
        self.request_broadcast = channel.unary_stream(
                '/Drunc.Controller/request_broadcast',
                request_serializer=controller__pb2.Client.SerializeToString,
                response_deserializer=controller__pb2.BroadcastMessage.FromString,
                )


class ControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_control_tree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_available_commands(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def execute_command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def execute_command_on_child(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_broadcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_control_tree': grpc.unary_unary_rpc_method_handler(
                    servicer.get_control_tree,
                    request_deserializer=controller__pb2.Ping.FromString,
                    response_serializer=controller__pb2.ControlTree.SerializeToString,
            ),
            'get_available_commands': grpc.unary_unary_rpc_method_handler(
                    servicer.get_available_commands,
                    request_deserializer=controller__pb2.Ping.FromString,
                    response_serializer=controller__pb2.ListOfCommands.SerializeToString,
            ),
            'execute_command': grpc.unary_stream_rpc_method_handler(
                    servicer.execute_command,
                    request_deserializer=controller__pb2.Command.FromString,
                    response_serializer=controller__pb2.CommandResponse.SerializeToString,
            ),
            'execute_command_on_child': grpc.unary_stream_rpc_method_handler(
                    servicer.execute_command_on_child,
                    request_deserializer=controller__pb2.ChildCommand.FromString,
                    response_serializer=controller__pb2.CommandResponse.SerializeToString,
            ),
            'request_broadcast': grpc.unary_stream_rpc_method_handler(
                    servicer.request_broadcast,
                    request_deserializer=controller__pb2.Client.FromString,
                    response_serializer=controller__pb2.BroadcastMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Drunc.Controller', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Controller(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_control_tree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Drunc.Controller/get_control_tree',
            controller__pb2.Ping.SerializeToString,
            controller__pb2.ControlTree.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_available_commands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Drunc.Controller/get_available_commands',
            controller__pb2.Ping.SerializeToString,
            controller__pb2.ListOfCommands.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def execute_command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Drunc.Controller/execute_command',
            controller__pb2.Command.SerializeToString,
            controller__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def execute_command_on_child(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Drunc.Controller/execute_command_on_child',
            controller__pb2.ChildCommand.SerializeToString,
            controller__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Drunc.Controller/request_broadcast',
            controller__pb2.Client.SerializeToString,
            controller__pb2.BroadcastMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PingProcessorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_stream(
                '/Drunc.PingProcessor/ping',
                request_serializer=controller__pb2.Ping.SerializeToString,
                response_deserializer=controller__pb2.Ping.FromString,
                )


class PingProcessorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PingProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_stream_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=controller__pb2.Ping.FromString,
                    response_serializer=controller__pb2.Ping.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Drunc.PingProcessor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PingProcessor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Drunc.PingProcessor/ping',
            controller__pb2.Ping.SerializeToString,
            controller__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
